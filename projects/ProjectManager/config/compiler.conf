overall_options
    -v|Afficher les commandes exécutées|Affiche les commandes exécutées lors des étapes de compilations. Affiche aussi les versions de pilote de compilateur et de de processeur ainsi que le compilateur approprié.
    -###|Comme -v mais sans exécution|Effectue la même chose que l'option -v mais n'exécute pas les commandes et écrit les arguments entre guillemets sauf s'ils contiennent uniquement des caractères alphanumériques et "./-_".
    --version|Affiche la version|Affiche la version du compilateur lors de l'appel.
    -pass-exit-codes|Retourne le plus haut code d'erreur|Par défaut, le compilateur renvoie 1 en cas d'erreur. Avec cette option, il renverra le plus haut code de retour rencontré lors de la compilation.
    -pipe|Utiliser des pipes|Le compilateur utilisera des pipe plutôt que des fichiers temporaires pour ses actions. Attention, ne fonctionne pas avec certains assembleur.
    -specs=[file]|Traite le fichier [file] après le fichiers specs standard|Ceci permet de redéfinir des variables pour le pilotes du compilateur et déterminer quel comutateur passer aux programmes ld, as, cc1, cc1plu, ... Plusieurs de ces fichiers peuvent être définis et sont traités dans l'ordre d'apparition.
    -wrapper|Permet de définir un programme wrapper|Le nom du programme wrapper et ses paramètres sont transmis sous forme de liste séparée par des virgules. Tous les sous programmes appelés seront appelés avec ce wrapper.
    -ffile-prefix-map=[old]=[new]|Change la localisation des références|Permet de compiler des fichiers dans le dossier old comme s'ils se trouvaient dans le dossier old.
    -fplugin=[name].so|Chargement de plugin|Permet de charger le plugin [name].so. Ce fichier doit être dynamique pour être chargé par dlopen.
    -fplugin-arg-[name]-[key]=[value]|Définition d'argument de plugin|Cette option défini l'argument [key] du plugin [name] à la valeur [value].
    -fdump-ada-spec[-slim]|Génère les specs Ada|Pour des sources C/C++ et des fichiers includes, génère les specs Ada.
    -fada-spec-parent=[unit]|Génère les specs Ada filles|Avec l'option <strong>-fdump-ada-spec[-slim]</strong>, génère les specs Ada comme filles de l'unité [unit].
    -fdump-go-spec=[file]|Générer les déclarations Go|Génère les type Go "const", "type", "var" et "func" pour permettre la génération d'une interface Go avec du code dans un autre langage.
    @[file]|Inclure les options d'un fichier|Inclut les options du fichier [file] à la place de cette option.

c_language
    -ansi|Mode ANSI|Désactive certaines fonctionnalités de GCC qui sont incompatible avec ISO C90 (en C) ou de la librairie standard (en C++). Equivaut à <strong>-std=c90</strong> en C ou <strong>-std=c++98</strong> en C++.
    -std=|Détermine le langage standard|Permet de définir le langage standard parmi : c90, c89, iso9899:1990, iso9899:199409, c99, c9x, iso9899:1999, iso9899:199x, c11, c1x, iso9899:2011, c17, c18, iso9899:2017, iso9899:2018, c2x, gnu90, gnu89, gnu99, gnu9x, gnu11, gnu1x, gnu17, gnu18, gnu2x, c++98, c++03, gnu++98, gnu++03, c++11, c++0x, gnu++11, gnu++0x, c++14, c++1y, gnu++14, gnu++1y, c++17, c++1z, gnu++17, gnu++1z,  c++2a, gnu++2a.
    -fgnu89-inline|Utiliser la sémentique "inline" traditionnelle de GNU en mode C99|Equivalent à ajouter "gnu_inline" comme attribut de chaque fonction inline. N'est pas supporté en mode C90. Utiliser <strong>-fno-gnu89-inline</strong> pour utiliser la sémentique "inline" en mode C99. Les macros "__GNUC_GNU_INLINE__" et "__GNUC_STDC_INLINE__" permettent de savoir quelle sémentique est utilisée.

cxx_language
